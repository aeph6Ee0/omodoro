#!/usr/bin/python

# pomodoro script by Oliver Kraitschy
# http://okraits.de okraits@arcor.de
# https://github.com/okraits/omodoro
#
from os import system
from datetime import datetime, timedelta
from time import sleep
from threading import Thread, Lock
from sys import argv
from configparser import ConfigParser
from os.path import exists

# SETTINGS
# adjust the pomodoro cycle to your needs
num_pomodori = 4 # number of pomodori to do in a cycle
length_pomodori = 25 # length of one pomodori in minutes
length_short_break = 5 # length of a short break in minutes
length_long_break = 15 # length of a long break in minutes

def printUsageInfo():
    print("""Usage:
\tomodoro
\tomodoro P-L-S-B
with
\tP\tnumber of pomodori to do in a cycle
\tL\tlength of one pomodori in minutes
\tS\tlength of a short break in minutes
\tB\tlength of a long break in minutes\n
Example with the default values:
\tomodoro 4-25-5-15
""")

def printCLIInfo():
    print("""Welcome to omodoro. Available commands:\n
 p pause the current pomodoro cycle
 c continue the current pomodoro cycle
 n abort current pomodori/break, start next one
 q quit omodoro""")

# global variables
class States:
    Pomodori, ShortBreak, LongBreak = range(3)
cnt_pomodori = num_pomodori # pomodori left in the current cycle
cnt_short_breaks = num_pomodori - 1 # short breaks left in the current cycle
end_time = None # end time of the current state
time_left = None # time left after the pause
state = States.Pomodori
command = "" # input string
lockObject = Lock()
nextState = False # indicates user-triggered state change

def changeState(newState, length):
    global end_time, state, nextState
    title = ""
    description = ""
    if newState == States.Pomodori:
        title = "Next Pomodori"
        description = "Please start with the next Pomodori!\nEnd Time:"
    elif newState == States.ShortBreak:
        title = "Short Break"
        description = "Please take a short break!\nEnd Time:"
    elif newState == States.LongBreak:
        title = "Long Break"
        description = "Please take a long break!\nEnd Time:"
    else:
        # Something went wrong - exit
        exit(1)
    end_time = datetime.now() + timedelta(minutes=length)
    print("\n%s\nEnd Time: %s\n$ " % (title, end_time.strftime("%H:%M")), end="")
    system("notify-send -u critical '%s' '%s %s'" % (title, description, end_time.strftime("%H:%M")))
    state = newState
    nextState = False # user-triggered change state finished

class PomodoroThread(Thread):
    def __init__(self):
        Thread.__init__(self)

    def run(self):
        global cnt_pomodori, cnt_short_breaks, state

        while command != "q":
            lockObject.acquire()
            if state == States.Pomodori:
                # pomodori is not over
                if end_time > datetime.now() and not nextState:
                    pass
                else:
                    # decrease number of pomodori for the current cycle
                    cnt_pomodori -= 1
                    if length_short_break > 0 and cnt_short_breaks > 0:
                        # length of short breaks > 0 and short breaks left -> start short break
                        changeState(States.ShortBreak, length_short_break)
                    elif length_short_break == 0 and cnt_pomodori != 0:
                        # no short breaks -> start next pomodori
                        changeState(States.Pomodori, length_pomodori)
                    elif cnt_pomodori == 0:
                        # last pomodori over -> start long break
                        changeState(States.LongBreak, length_long_break)
                    else:
                        # Something went wrong - exit
                        print("Error - aborting.")
                        exit(1)
            elif state == States.ShortBreak:
                # short break is not over
                if end_time > datetime.now() and not nextState:
                    pass
                else:
                    # decrease number of short breaks for the current cycle
                    cnt_short_breaks -= 1
                    # start next pomodori
                    changeState(States.Pomodori, length_pomodori)
                pass
            elif state == States.LongBreak:
                # long break is not over
                if end_time > datetime.now() and not nextState:
                    pass
                else:
                    # re-init variables, start next cycle
                    cnt_pomodori = num_pomodori
                    cnt_short_breaks = num_pomodori - 1
                    changeState(States.Pomodori, length_pomodori)
            else:
                # Something went wrong - exit
                print("Error - aborting.")
                exit(1)
            lockObject.release()
            sleep(30)
        print("Shutdown finished.")
        

if __name__ == "__main__":

    conf_file = 'omodoro.conf'
    if exists(conf_file):
        config = ConfigParser()
        config.read(conf_file)
        try:
            num_pomodori = int(config['POMODORO']['number'])
            length_pomodori = int(config['POMODORO']['length'])
            length_short_break = int(config['POMODORO']['short_break'])
            length_long_break = int(config['POMODORO']['long_break'])
        except KeyError as error:
            print('"{key}" is not located in the config file "{file}".'.format(
                key=error,
                file=conf_file))
            exit(1)

    if len(argv) != 1:
        if len(argv) == 2:
            if (argv[1] == "-h") or (argv[1] == "--help"):
                printUsageInfo()
                exit(0)
            else:
                try:
                    user_values = argv[1].split('-')
                    num_pomodori = int(user_values[0])
                    length_pomodori = int(user_values[1])
                    length_short_break = int(user_values[2])
                    length_long_break = int(user_values[3])
                except:
                    print("Invalid argument: " + str(argv[1]) + "\n")
                    printUsageInfo()
                    exit(1)
        else:
            printUsageInfo()
            exit(1)

    printCLIInfo()
    # start first pomodori
    changeState(States.Pomodori, length_pomodori)
    # run pomodoro thread
    pomodorothread = PomodoroThread()
    pomodorothread.start()

    # commandline interface
    while True:
        command = input()
        if command == "p":
            time_left = end_time - datetime.now()
            lockObject.acquire(True)
            print("Paused.\n$ ", end="")
        elif command == "c":
            end_time = datetime.now() + time_left
            lockObject.release()
            print("Continuing the current pomodoro cycle.\nNew End Time: %s\n$ " % end_time.strftime("%H:%M"), end="")
        elif command == "n":
            nextState = True
            print("Skipping to next pomodori/break, please wait some seconds.", end="")
        elif command == "q":
            print("omodoro is shutting down, please wait some seconds.")
            exit(0)
        else:
            print("Unknown command.\n$ ", end="")
